plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18, 6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.diffplug.eclipse.apt' version '3.42.2'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id "net.darkhax.curseforgegradle" version "1.0.7"
    id "com.modrinth.minotaur" version "2.+"
}

base {
    archivesName = "${fileName}-${mc_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(project.properties.javaVersion)

jarJar.enable()

minecraft {
    mappings channel: 'parchment', version: project.properties.parchmentVersion
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    enableEclipsePrepareRuns = true
    copyIdeResources = true
    generateRunFolders = true
    runs {
        configureEach {
            ideaModule = "${project.name}.main"
            workingDirectory project.file('run')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        client = {
        }
        server = {
        }
        data = {
            workingDirectory project.file('run-data')
            args '--mod', "${modid}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        // CurseForge
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        // Curios
        url "https://maven.theillusivec4.top"
        content {
            includeGroupByRegex "top\\.theillusivec4.*"
        }
    }
    maven {
        // The One Probe
        url "https://maven.k-4u.nl"
        content {
            includeGroup "mcjty.theoneprobe"
        }
    }
    maven {
        // Patchouli
        url "https://maven.blamejared.com"
        content {
            includeGroup "vazkii.patchouli"
            includeGroupByRegex "net\\.darkhax.*"
            includeGroupByRegex "com\\.blamejared.*"
            includeGroup "org.openzen.zencode"
            includeGroup "mezz.jei"
        }
    }
    maven {
        // Shadows
        url "https://maven.shadowsoffire.dev/releases"
        content {
            includeGroup "dev.shadowsoffire"
        }
    }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.kosmx.dev/' }
    maven { url 'https://jitpack.io' }
    maven { url "https://maven.isxander.dev/releases" }
    maven { url = "https://maven.bawnorton.com/releases" }
    maven { url = 'https://maven.greenhouseteam.dev/releases/' }
    maven { url "https://maven.ladysnake.org/releases" }
}

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${forge_version}"

    // Mixin

    // MixinSquared's annotationProcessor MUST be registered BEFORE Mixin's one.
    compileOnly(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-common:0.2.0"))
    implementation(jarJar("com.github.bawnorton.mixinsquared:mixinsquared-forge:0.2.0")) {
        jarJar.ranged(it, "[0.2.0,)")
    }
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }

    // Important Stuff
    implementation fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    implementation fg.deobf("curse.maven:jade-324717:${jade_file_id}")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")
    implementation fg.deobf("dev.isxander:yet-another-config-lib:${project.yacl_version}")

    // Shared Libs
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${project.player_anim_version}")
    runtimeOnly fg.deobf("curse.maven:geckolib-388172:5460309")
    runtimeOnly fg.deobf("curse.maven:caelus-308989:5281700")
    runtimeOnly fg.deobf("curse.maven:attributefix-280510:4911084")

    // Apotheosis
    runtimeOnly fg.deobf("dev.shadowsoffire:Placebo:${mc_version}-${placebo_version}")
    runtimeOnly fg.deobf("dev.shadowsoffire:ApothicAttributes:${mc_version}-${attributeslib_version}")
    implementation fg.deobf("dev.shadowsoffire:Apotheosis:${mc_version}-${apotheosis_version}")

    // Ars Nouveau
    implementation fg.deobf("curse.maven:ars-nouveau-401955:5600384")

    // Better Combat
    runtimeOnly fg.deobf("maven.modrinth:better-combat:${better_combat_version}+${mc_version}-forge")

    // BOMD
    runtimeOnly fg.deobf("curse.maven:bosses-of-mass-destruction-forge-941573:4955739")

    // Cataclysm
    runtimeOnly fg.deobf("curse.maven:lionfish-api-1001614:5363774")
    runtimeOnly fg.deobf("curse.maven:lendercataclysm-551586:5474791")

    // Mana Unification
    implementation fg.deobf("curse.maven:mana-unification-1083306:5729342")

    // Celestisynth
    implementation fg.deobf("curse.maven:celestisynth-872712:5116555")

    // FTB
    implementation fg.deobf("curse.maven:ftb-chunks-forge-314906:5378090")
    implementation fg.deobf("curse.maven:ftb-library-forge-404465:5543335")
    runtimeOnly fg.deobf("curse.maven:ftb-teams-forge-404468:5267190")
    runtimeOnly fg.deobf("curse.maven:architectury-api-419699:5137938")

    // Irons
    implementation fg.deobf("curse.maven:irons-spells-n-spellbooks-855414:5539243")

    // Health Bar
    implementation fg.deobf("curse.maven:ydms-mobhealthbar-mod-559894:4818965")

    // Autoleveling + Skill Tree
    implementation fg.deobf("curse.maven:auto-leveling-616126:4899526")
    implementation fg.deobf("curse.maven:passive-skill-tree-850298:5715659")
    implementation fg.deobf("curse.maven:item-production-lib-950401:5114036")

    // Survive
    implementation fg.deobf("curse.maven:survive-367337:5909615")
    implementation fg.deobf("curse.maven:unionlib-367806:5546278")

    // Target Dummy
    implementation fg.deobf("curse.maven:mmmmmmmmmmmm-225738:5594972")
    runtimeOnly fg.deobf("curse.maven:selene-499980:5640082")

    // Tom's Storage
    compileOnly fg.deobf("curse.maven:toms-storage-378609:5548573")

    // Traveler's Backpack
    implementation fg.deobf("curse.maven:travelers-backpack-321117:5764972")

    // Waystones
    implementation fg.deobf("curse.maven:waystones-245755:5500759")
    implementation fg.deobf("curse.maven:balm-531761:5467600")

    // Farmer's Delight
    implementation fg.deobf("curse.maven:farmers-delight-398521:5878214")

    // Just Leveling
    implementation fg.deobf("curse.maven:justleveling-fork-1073400:5890034")

    // Eidolon
    implementation fg.deobf("curse.maven:eidolon-repraised-870250:5877358")

    // Wizards Reborn
    implementation fg.deobf("curse.maven:wizards-reborn-913994:5887547")
    implementation fg.deobf("curse.maven:fluffy-fur-1097456:5885492")

    // Tetra
    implementation fg.deobf("curse.maven:tetra-289712:5544287")
    runtimeOnly fg.deobf("curse.maven:mutil-351914:4824501")

    // Origins
    implementation fg.deobf("io.github.edwinmindcraft:calio-forge:${mc_version}-${calio_forge_version}")
    implementation fg.deobf("io.github.edwinmindcraft:apoli-forge:${mc_version}-${apoli_forge_version}")
    implementation fg.deobf("io.github.edwinmindcraft:origins-forge:${mc_version}-${origins_forge_version}")
    implementation fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}+1.20")
    implementation(fg.deobf("de.dafuqs:additionalentityattributes-forge:${aea_forge_version}") {
        exclude group: 'net.minecraftforge'
        exclude group: 'com.github.llamalad.mixinextras'
    })

    // Dungeons and Combat
    compileOnly fg.deobf("curse.maven:dungeons-and-combat-1128235:6077203")

    // Ice and Fire Spellbooks
    implementation fg.deobf("curse.maven:ice-and-fire-spellbooks-977855:5844739")

    // Ice and Fire
    implementation fg.deobf("curse.maven:ice-and-fire-dragons-264231:5633453")
    implementation fg.deobf("curse.maven:citadel-331936:6002521")

    // Traveloptics
    implementation fg.deobf("curse.maven:to-tweaks-irons-spells-1046916:6094255")

}

mixin {
    if (project.mixin.toBoolean()) {
        config "${modid}.mixins.json"
        add sourceSets.main, "${modid}.refmap.json"
    }
}

tasks.named('processResources', ProcessResources).configure {
    def replaceProperties = [
        modGroup: modGroup,
        modid: modid,
        version: version,
        modName: modName,
        author: author,
        desc: desc,
        mcVersion: mc_version,
        javaVersion: javaVersion,
        forgeVersion: forge_version
    ]

    if (project.hasProperty('placeboVersion'))       replaceProperties.put 'placeboVersion', placebo_version
    if (project.hasProperty('attributeslibVersion')) replaceProperties.put 'attributeslibVersion', attributeslib_version
    if (project.hasProperty('curiosVersion'))        replaceProperties.put 'curiosVersion', curiosVersion
    if (project.hasProperty('topVersion'))           replaceProperties.put 'topVersion', topVersion
    if (project.hasProperty('patchouliVersion'))     replaceProperties.put 'patchouliVersion', patchouliVersion

    inputs.properties replaceProperties

    def resourceTargets = [
        'META-INF/mods.toml',
        'pack.mcmeta'
    ]

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    // Automatically populate mixins.json from the mixin package and rename to modid.mixins.json
    filesMatching('mixins.json') {
        def mixinFiles = []
        def clientMixinFiles = []

        def path = "${project.projectDir}/src/main/java/${modGroup}/${modid}/mixin".replaceAll('\\.', '/')
        fileTree(path).visit { FileVisitDetails details ->
            def name = details.file.path.replace('\\', '/')
            name = name.substring(name.indexOf('mixin/') + 'mixin/'.length(), name.length())
            if(name.endsWith('.java')) {
                name = name.substring(0, name.length() - '.java'.length())
                if(name.startsWith('client')) {
                    clientMixinFiles.add(name)
                } else {
                    mixinFiles.add(name)
                }
            }
        }

        def mixins = ''
        def clientMixins = ''

        for (int i = 0; i < mixinFiles.size(); i++) {
            def name = mixinFiles[i]
            name = name.replaceAll('\\/', '.')
            mixins += '        "' + name + '"'
            if (i != mixinFiles.size() - 1) {
                mixins += ',\n'
            }
        }

        for (int i = 0; i < clientMixinFiles.size(); i++) {
            def name = clientMixinFiles[i]
            name = name.replaceAll('\\/', '.')
            clientMixins += '        "' + name + '"'
            if (i != clientMixinFiles.size() - 1) {
                clientMixins += ',\n'
            }
        }

        replaceProperties.put('mixins', mixins)
        replaceProperties.put('clientMixins', clientMixins)

        expand replaceProperties
        name "${modid}.mixins.json".toString()
    }

    // Automatically populate coremods.json file from existing coremod js files in /coremods
    filesMatching('META-INF/coremods.json') {
        def names = []
        fileTree("${project.projectDir}/src/main/resources/coremods").visit { FileVisitDetails details ->
            def name = details.file.path.replace('\\', '/')
            name = name.substring(name.indexOf('coremods'), name.length())
            if(name.endsWith('.js')) {
                names.add(name)
            }
        }

        def coremods = ''

        for (int i = 0; i < names.size(); i++) {
            def name = names[i]
            coremods += "\t\"${modid}_" + name.substring('coremods/'.length(), name.length() - 3) + '": "' + name + '"'
            if (i != names.size() - 1) {
                coremods += ',\n'
            }
        }

        replaceProperties.put('coremods', coremods)

        expand replaceProperties
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            "Specification-Title": project.fileName,
            "Specification-Vendor": project.author,
            "Specification-Version": "1.0", // We are version 1 of ourselves
            "Implementation-Title": project.fileName,
            "Implementation-Version": project.version,
            "Implementation-Vendor" : project.author,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": project.mixin.toBoolean() ? "${modid}.mixins.json" : ""
        ])
    }

    finalizedBy 'reobfJar'
}

java {
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

tasks.jarJar.configure {
    archiveClassifier = ""
    dependsOn('reobfJar')
}

reobf {
    jarJar {}
}

jar.finalizedBy('reobfJarJar')

tasks.register('sendToModpack', Copy) {
    group = 'publishing'
    dependsOn 'jarJar'
    from tasks.jarJar.archiveFile
    //wtf is a renpi
    into 'C:/Users/renpi/curseforge/minecraft/Instances/Otherworld Beta/mods'
    rename { String fileName ->
        fileName.replace(project.version.toString(), "dev")
    }
    doLast {
        println "Mod JAR sent to modpack folder: ${tasks.jarJar.archiveFileName.get()}"
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "medieval-core-mod"
    versionNumber = "${version}"
    versionType = "release"
    versionName = "Forge/Neoforge-${rootProject.version}+${mc_version}"
    changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    uploadFile = jar
    gameVersions = forge_game_versions.split(", ").toList()
    loaders = forge_mod_loaders.split(", ").collect { return it.toLowerCase(Locale.ROOT) }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = System.getenv("CF_TOKEN")
    group = "publishing"
    def mainFile = upload(1055023, jar)
    mainFile.displayName = "Forge/Neoforge-${rootProject.version}+${mc_version}"
    mainFile.releaseType = "release"
    mainFile.changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    mainFile.changelogType = "markdown"
    forge_mod_loaders.split(", ").each {
        mainFile.addModLoader(it)
    }
    forge_game_versions.split(", ").each {
        mainFile.addGameVersion(it)
    }
}